const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const express = require('express');
const fs = require('fs');
const path = require('path');
const app = express();
const port = process.env.PORT || 3000;

// Modules pour les nouvelles fonctionnalit√©s
const { processVoiceMessage } = require('./voice.js');
const { setupProactiveNotifications } = require('./notifications.js');
const { understandNaturalLanguage } = require('./nlp.js');
const { detectLanguage, translateText } = require('./i18n.js');

// Configuration du client WhatsApp
const chromePath = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe";
const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        executablePath: chromePath,
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
});

// Structure des menus
const options = {
    "1": {
        name: "Probl√®mes de paiement",
        suboptions: [
            "1Ô∏è‚É£ Re√ßu non g√©n√©r√©",
            "2Ô∏è‚É£ Nom incorrect sur le re√ßu",
            "3Ô∏è‚É£ Impossible de retirer un re√ßu"
        ]
    },
    "2": {
        name: "T√©l√©chargement de documents",
        suboptions: [
            "1Ô∏è‚É£ Fiche de paiement introuvable",
            "2Ô∏è‚É£ Probl√®me d'impression",
            "3Ô∏è‚É£ Demande de duplicata",
            "4Ô∏è‚É£ Autre probl√®me de t√©l√©chargement"
        ]
    },
    "3": {
        name: "Modifications",
        suboptions: [
            "1Ô∏è‚É£ Correction de date",
            "2Ô∏è‚É£ Modification du nom",
            "3Ô∏è‚É£ Changement d'adresse",
            "4Ô∏è‚É£ Autre demande de modification"
        ]
    },
    "4": {
        name: "Questions g√©n√©rales",
        suboptions: [
            "1Ô∏è‚É£ Comment l√©galiser un document ?",
            "2Ô∏è‚É£ Certificat m√©dical",
            "3Ô∏è‚É£ Facture minist√©rielle"
        ],
        nestedSuboptions: {
            "2": [ // Sous-options pour "Certificat m√©dical"
                "1Ô∏è‚É£ Co√ªt d'un certificat m√©dical",
                "2Ô∏è‚É£ Comment obtenir un certificat m√©dical ?",
                "3Ô∏è‚É£ Retirer son certificat m√©dical"
            ],
            "3": [ // Sous-options pour "Facture minist√©rielle"
                "1Ô∏è‚É£ Payer sa facture minist√©rielle"
            ]
        }
    },
    "5": {
        name: "Probl√®mes techniques",
        suboptions: [
            "1Ô∏è‚É£ Erreur de validation de paiement",
            "2Ô∏è‚É£ Num√©ro de dossier d√©j√† utilis√©",
            "3Ô∏è‚É£ Probl√®me de connexion au site",
            "4Ô∏è‚É£ Autre probl√®me technique"
        ]
    }
};

// Variables globales
let userStates = {};
const documentFolder = path.join(__dirname, 'documents');
const pendingRequests = new Map(); // Pour les notifications proactives

// Cr√©er le dossier documents s'il n'existe pas
if (!fs.existsSync(documentFolder)) {
    fs.mkdirSync(documentFolder);
}

// Initialisation des fonctionnalit√©s avanc√©es
setupProactiveNotifications(client, pendingRequests);

// Gestionnaire d'√©v√©nement : QR Code
client.on('qr', qr => {
    console.log("\nüì∑ Scannez ce QR code avec votre t√©l√©phone :");
    qrcode.generate(qr, { small: true });
});

// Gestionnaire d'√©v√©nement : Bot pr√™t
client.on('ready', () => {
    console.log('‚úÖ Bot WhatsApp connect√© avec succ√®s !');
});

// Gestionnaire d'√©v√©nement : Message re√ßu
client.on('message', async msg => {
    try {
        const from = msg.from;
        let message = msg.body.trim();

        console.log(`üì© Message re√ßu de ${from}: ${message}`);

        // Traitement des messages vocaux
        if (msg.hasMedia) {
            const media = await msg.downloadMedia();
            if (media.mimetype.includes('audio')) {
                message = await processVoiceMessage(media);
                console.log(`Message vocal converti: ${message}`);
            }
        }

        // D√©tection de la langue et traduction si n√©cessaire
        const lang = await detectLanguage(message);
        if (lang !== 'fr') {
            message = await translateText(message, 'fr');
            console.log(`Message traduit en fran√ßais: ${message}`);
        }

        // Compr√©hension des demandes √©crites naturelles
        const matchedOption = await understandNaturalLanguage(message, options);
        if (matchedOption && !options[message]) {
            message = matchedOption;
            console.log(`Demande naturelle mapp√©e √† l'option: ${message}`);
        }

        // Gestion des √©tats utilisateur
        if (userStates[from] === "awaiting_payment_confirmation") {
            if (message === "1") {
                userStates[from] = "awaiting_unique_code";
                await msg.reply("Veuillez entrer votre code unique :");
            } else if (message === "2") {
                delete userStates[from];
                await msg.reply("Pour g√©n√©rer votre document, vous devez d'abord effectuer le paiement. Une fois pay√©, vous recevrez un code unique par SMS, que vous pourrez utiliser pour r√©cup√©rer votre document sur le site officiel. Si vous avez besoin d'aide, n'h√©sitez pas √† nous contacter.");
            } else {
                await msg.reply("Veuillez r√©pondre par '1' (Oui) ou '2' (Non). Avez-vous d√©j√† effectu√© le paiement ?");
            }
            return;
        }

        if (userStates[from] === "awaiting_unique_code") {
            const filePath = path.join(documentFolder, `${message}.pdf`);
            console.log(`Chemin du fichier : ${filePath}`);

            try {
                if (fs.existsSync(filePath)) {
                    const media = MessageMedia.fromFilePath(filePath);
                    await msg.reply(media, null, { caption: "‚úÖ Votre document a √©t√© trouv√©. Voici votre fichier :" });
                } else {
                    await msg.reply("‚ö†Ô∏è Code unique invalide. Veuillez entrer un code correct.");
                }
            } catch (error) {
                console.error("Erreur lors de l'envoi du fichier :", error);
                await msg.reply("‚ùå Une erreur s'est produite lors de l'envoi du document. Veuillez r√©essayer plus tard.");
            }
            delete userStates[from];
            return;
        }

        if (userStates[from] === "awaiting_suboption") {
            if (message === "1") {
                userStates[from] = "awaiting_payment_confirmation";
                await msg.reply("Avez-vous d√©j√† effectu√© le paiement ?\n1Ô∏è‚É£ Oui\n2Ô∏è‚É£ Non");
            } else {
                await sendMainMenu(msg);
                delete userStates[from];
            }
            return;
        }

        if (userStates[from] === "awaiting_general_questions") {
            if (message === "1") {
                await msg.reply("Pour l√©galiser un document, veuillez vous rendre au minist√®re comp√©tent avec une copie du document et une pi√®ce d'identit√©.");
            } else if (message === "2") {
                await sendNestedSubMenu(msg, "2");
                userStates[from] = "awaiting_certificat_medical";
            } else if (message === "3") {
                await sendNestedSubMenu(msg, "3");
                userStates[from] = "awaiting_facture_minist√©rielle";
            } else {
                await sendMainMenu(msg);
            }
            return;
        }

        if (userStates[from] === "awaiting_certificat_medical") {
            if (message === "1") {
                await msg.reply("Le co√ªt d'un certificat m√©dical est de 5 000 FCFA.");
            } else if (message === "2") {
                await msg.reply("Pour obtenir un certificat m√©dical, veuillez vous rendre √† l'h√¥pital le plus proche avec une pi√®ce d'identit√© valide.");
            } else if (message === "3") {
                userStates[from] = "awaiting_payment_confirmation";
                await msg.reply("Avez-vous d√©j√† effectu√© le paiement pour le certificat m√©dical ?\n1Ô∏è‚É£ Oui\n2Ô∏è‚É£ Non");
            } else {
                await sendMainMenu(msg);
            }
            return;
        }

        if (userStates[from] === "awaiting_facture_minist√©rielle") {
            if (message === "1") {
                await msg.reply("Voici le lien pour payer votre facture minist√©rielle :\nhttps://www.elegantthemes.com/gallery/divi/");
                delete userStates[from];
            } else {
                await sendMainMenu(msg);
            }
            return;
        }

        if (userStates[from] === "awaiting_document_download") {
            if (message === "1") {
                await msg.reply("Pour t√©l√©charger votre fiche de paiement, veuillez suivre ce lien : [lien de t√©l√©chargement]");
            } else if (message === "2") {
                await msg.reply("Si vous rencontrez un probl√®me d'impression, veuillez v√©rifier votre imprimante ou contacter le support technique.");
            } else if (message === "3") {
                await msg.reply("Pour demander un duplicata, veuillez remplir ce formulaire : [lien du formulaire]");
            } else if (message === "4") {
                await msg.reply("Pour toute autre demande, veuillez contacter un agent. Vous serez recontact√© dans les 24 heures.");
                userStates[from] = "awaiting_agent_contact";
            } else {
                await sendMainMenu(msg);
            }
            return;
        }

        if (userStates[from] === "awaiting_modification") {
            if (message === "1") {
                await msg.reply("Pour corriger une date, veuillez fournir les documents justificatifs √† l'adresse suivante : [adresse]");
            } else if (message === "2") {
                await msg.reply("Pour modifier un nom, veuillez fournir une preuve l√©gale (acte de naissance, jugement, etc.) √† l'adresse suivante : [adresse]");
            } else if (message === "3") {
                await msg.reply("Pour changer d'adresse, veuillez remplir ce formulaire : [lien du formulaire]");
            } else if (message === "4") {
                await msg.reply("Pour toute autre demande de modification, veuillez contacter un agent. Vous serez recontact√© dans les 24 heures.");
                userStates[from] = "awaiting_agent_contact";
            } else {
                await sendMainMenu(msg);
            }
            return;
        }

        if (userStates[from] === "awaiting_technical_issue") {
            if (message === "1") {
                await msg.reply("Pour r√©soudre une erreur de validation de paiement, veuillez v√©rifier vos informations de paiement ou contacter votre banque.");
            } else if (message === "2") {
                await msg.reply("Si votre num√©ro de dossier est d√©j√† utilis√©, veuillez contacter le support technique pour v√©rification.");
            } else if (message === "3") {
                await msg.reply("Pour r√©soudre un probl√®me de connexion au site, veuillez v√©rifier votre connexion internet ou contacter le support technique.");
            } else if (message === "4") {
                await msg.reply("Pour toute autre probl√®me technique, veuillez contacter un agent. Vous serez recontact√© dans les 24 heures.");
                userStates[from] = "awaiting_agent_contact";
            } else {
                await sendMainMenu(msg);
            }
            return;
        }

        if (userStates[from] === "awaiting_agent_contact") {
            await msg.reply("Un agent vous contactera dans les 24 heures. Merci de votre patience.");
            delete userStates[from];
            return;
        }

        // Gestion du menu principal
        if (!options[message]) {
            await sendMainMenu(msg);
        } else {
            if (message === "1") {
                await sendSubMenu(msg, "1");
                userStates[from] = "awaiting_suboption";
            } else if (message === "2") {
                await sendSubMenu(msg, "2");
                userStates[from] = "awaiting_document_download";
            } else if (message === "3") {
                await sendSubMenu(msg, "3");
                userStates[from] = "awaiting_modification";
            } else if (message === "4") {
                await sendSubMenu(msg, "4");
                userStates[from] = "awaiting_general_questions";
            } else if (message === "5") {
                await sendSubMenu(msg, "5");
                userStates[from] = "awaiting_technical_issue";
            } else {
                await sendMainMenu(msg);
            }
        }

        // Enregistrement des demandes n√©cessitant un suivi
        if (userStates[from] && userStates[from].includes("awaiting_agent_contact")) {
            pendingRequests.set(from, {
                request: message,
                timestamp: Date.now(),
                state: userStates[from]
            });
        }
    } catch (error) {
        console.error("Erreur dans le gestionnaire de message:", error);
    }
});

// Fonction pour envoyer le menu principal
async function sendMainMenu(msg) {
    let menuText = "Bienvenue ! Veuillez choisir une option en envoyant son num√©ro :\n\n";
    Object.keys(options).forEach(key => {
        menuText += `${key}Ô∏è‚É£ ${options[key].name}\n`;
    });
    await msg.reply(menuText);
}

// Fonction pour envoyer le sous-menu
async function sendSubMenu(msg, choice) {
    const submenuText = `${options[choice].name} :\n\n` + options[choice].suboptions.join('\n');
    await msg.reply(submenuText);
}

// Fonction pour envoyer les sous-options imbriqu√©es
async function sendNestedSubMenu(msg, choice) {
    const submenuText = `${options["4"].suboptions[parseInt(choice) - 1]} :\n\n` + options["4"].nestedSuboptions[choice].join('\n');
    await msg.reply(submenuText);
}

// D√©marrer le serveur Express
app.listen(port, () => {
    console.log(`üöÄ Serveur WhatsApp op√©rationnel sur le port ${port}`);
});

// Initialiser le client WhatsApp
client.initialize();